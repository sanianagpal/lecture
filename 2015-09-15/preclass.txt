For the questions regarding the Game of Life, you may want to refer
to the simple implementation included in the "life" subdirectory.
If you run "make glider", you can see a small example of running
the glider pattern for a few generations.

0.  How much time did you spend on this pre-class exercise, and when?

    ~90 minutes

1.  What are one or two points that you found least clear in the
    9/15 slide decks (including the narration)?

    I am not very good with the partial differential equations, so the whole particle
    systme and mesh was a bit difficult to understand


2.  In the basic implementation provided, what size board for the Game
    of Life would fit in L3 cache for one of the totient nodes?  Add a
    timer to the code and run on the totient node.  How many cells per
    second can we update for a board that fits in L3 cache?  For a
    board that does not fit?
    L3 cache is 15 MB
    so 2 boards * 2 * n * n = 15 * 2 ^20
    n = 1982.96 ~1982

3.  Assuming that we want to advance time by several generations,
    suggest a blocking strategy that would improve the operational
    intensity of the basic implementation.  Assume the board is
    not dilute, so that we must still consider every cell.  You may
    want to try your hand at implementing your strategy (though you
    need not spend too much time on it).

    Create blocks as per thecache size and dispatched to different processors
    so that each can be worked upon individually. For several genarations, keep a
    block in the memory and work on them. The bottleneck would be with combining them
    which has to be serial.

4.  Comment on what would be required to parallelize this code
    according to the domain decomposition strategy outlined in the
    slides.  Do you think you would see good speedups on one of
    the totient nodes?  Why or why not?

    Every processor works on a diffrent block with a layer of ghost cells,
    so that it has all the data required. Then using barrier synchronisation
    at every step before the next step.
    It seems this can give a good speedupbecause the blocks can be indiviadually
    worked upon until the communication and serial overhead overpowers the gain.
    The block sizes have to be selected accordingly.

5.  Suppose we want to compute long-range interactions between two
    sets of particles in parallel using the obvious n^2 algorithm in a
    shared-memory setting.  A naive implementation might look like

      struct particle_t {
          double x, y;
          double fx, fy;
      };

      // Update p1 with forces from interaction with p2
      void apply_forces(particle* p1, particle* p2);

      // Assume p is the index of the current processor,
      // part_idx[p] <= i < part_idx[p+1] is the range of
      // particles "owned" by processor p.
      //
      for (int i = part_idx[p]; i < part_idx[p+1]; ++i)
          for (int j = 0; j < npart; ++j)
              apply_forces(particle + i, particle + j);

    Based on what you know about memories and parallel architecture,
    do you see any features of this approach that are likely to lead
    to poor performance?

    It might be difficult to share memory between diffrent processors
    that would need protection of the critical section with mutex and semaphores,
    leading for many processes to be waiting on the other and hence poor performance.
